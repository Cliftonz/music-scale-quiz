# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-manager: [ "pnpm", "yarn", "bun", "npm" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up package manager
        id: setup-packagemanager
        run: |
          if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.package-manager }}" = "yarn" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.package-manager }}" = "bun" ]; then
            echo "manager=bun" >> $GITHUB_OUTPUT
            echo "runner=bun" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.package-manager }}" = "npm" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Set up Node.js
        if: ${{ steps.setup-packagemanager.outputs.manager != 'bun' }}
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: ${{ steps.setup-packagemanager.outputs.manager }}

      - name: Set up pnpm
        if: ${{ steps.setup-packagemanager.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v2.3.0

      - name: Set up bun
        if: ${{ steps.setup-packagemanager.outputs.manager == 'bun' }}
        run: |
          curl -fsSL https://bun.sh/install | bash
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml', '**/bun.lockb') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml', '**/bun.lockb') }}-

      - name: Install dependencies
        run: ${{ steps.setup-packagemanager.outputs.manager }} install

      - name: Build with Next.js
        run: ${{ steps.setup-packagemanager.outputs.runner }} next build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4